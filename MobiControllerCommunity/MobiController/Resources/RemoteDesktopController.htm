<!DOCTYPE HTML>
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <META HTTP-EQUIV="Expires" CONTENT="-1" />
    <title></title>

    <link rel="stylesheet" href="/m/jquery.mobile-1.3.2.min.css" />

    <script type="text/javascript" src="/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="/m/jquery.mobile-1.3.2.min.js"></script>

    <style media="screen" type="text/css">
        body {
            -webkit-user-select: none;
        }
        img {
            -webkit-user-select: none;
        }
        .imgbutton {
            margin: 20px;
            0px;
            width: 64px;
            height: 64px;
        }
        .toggled {
            border-style: solid;
            border-color: yellow;
        }
        textarea {
            display: block;
            position: absolute;
            left: 0px;
            top: 0px;
            opacity: 0.0;
            height: 0px;
            width: 0px;
            outline: 0;
            border: 0px none;
        }
    </style>

    <script type="text/javascript">
var reloads = 0;
var leadFinger = -1;
var isTap = true;
var isMouse = false;
var isZoom = false;
var tapEvent = tapZoom;
var imageSRC = 's?t=';
var imgInsert = "s";
var imageSRCdem;
var imageSRCtouch;
var prevX, prevY;
var updateMouse = false;
var Width;
var Height;
var Ratio;
var LeftCorner = [0, 0];
var charOffset = 0;
var updateKey = false;
var breakKey = false;
var backLen = 0;
var clickI;
var KeyBuff = "";
var lastKey;
$(window).on("popstate", function (e) {
    e.preventDefault();
    switch (e.originalEvent.state) {
    case "base":
        break;
    case "zoom":
        LeftCorner = [0, 0];
        tapEvent = tapZoom;
        imageSRC = 's?t=';
        imageSRCdem = "";
        isZoom = false;
        imageSRCtouch = "";
        $("#Desktop").attr('height', "auto");
        $("#Desktop").off("touchmove", moveView);
        break;
    case "mouse":
        $("#imgM").toggleClass("toggled");
        $("#Desktop").off("touchmove", moveDrag);
        if (isZoom) {
            $("#Desktop").on("touchmove", moveView);
            tapEvent = function () {
                mouseToggle($("#keys"))
            }
        } else {
            tapEvent = tapZoom
        }
        isMouse = false;
        $("#olay").css({
            opacity: 0.0
        });
        break
    }
});
$(function () {
    history.pushState("base", null, location.href);
    if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
        alert('There are known issues with this browser. Please download FireFox or Google Chrome.')
    }
    $("#Desktop").attr('width', $(document).width());
    $("#Desktop").on("touchstart", function (e) {
        $("#Desktop").off("mousemove", desktopMode);
        var event = e.originalEvent;
        var touch = event.changedTouches[0];
        leadFinger = touch.identifier;
        isTap = true;
        prevX = event.changedTouches[0].pageX;
        prevY = event.changedTouches[0].pageY
    });
    $("#Desktop").on("touchend", genTouchOver);
    $("#Desktop").on("touchcancel", genTouchOver);
    $("#Desktop").on("touchmove", function (e) {
        var event = e.originalEvent;
        var a = event.changedTouches;
        if (a[0].identifier == leadFinger) {
            if (isTap && isMouse) {
                var realx, realy;
                updateMouse = true;
                if (!isZoom) {
                    realx = Math.round(prevX * Ratio);
                    realy = Math.round(prevY * Ratio)
                } else {
                    realx = LeftCorner[0] + prevX;
                    realy = LeftCorner[1] + prevY
                }
                $.post("/ld?x=" + realx + "&y=" + realy)
            }
            isTap = false
        }
    });
    $("#Desktop").on("swipeleft", function () {
        $("#sidepanel").panel("open")
    });
    $.post("/sr", function (data) {
        var parts = data.split(",");
        Width = parseInt(parts[0]);
        Height = parseInt(parts[1]);
        Ratio = Width / $("#Desktop").width()
    });
    $("#Desktop").on("taphold", function (e) {
        e.preventDefault();
        isTap = false;
        var realx = LeftCorner[0] + prevX,
            realy = LeftCorner[1] + prevY;
        if (!isZoom) {
            realx = Math.round(realx * Ratio);
            realy = Math.round(realy * Ratio)
        }
        $.post("/rc?x=" + realx + "&y=" + realy)
    });
    $("#keys").blur(function () {
        $("#keys").val("");
        charOffset = 0
    });
    $("#keys").on('change', function () {
        breakKey = true
    });
    $("#keys").on("keyup", function (e) {
        if (e.which == 8) {
            if ($(this).val().length === 0) {
                backLen++
            }
        }
    });
    $("#Desktop").bind("contextmenu", function () {
        return false
    });
    $(document).on("scrollstop", function () {
        $("#keys").offset({
            top: document.pageXOffset,
            left: document.pageYOffset + 20
        })
    });
    $("#Desktop").on("mousemove", desktopMode)
});

function desktopMode() {
    $("#Desktop").off("mousemove", desktopMode);
    if (leadFinger = -1) {
        updateMouse = true;
        $(document).on("mousemove", mouseMove);
        $("#Desktop").on("mousedown", desktopMouseDown);
        $("#Desktop").on("mouseup", desktopMouseUp);
        $("#Desktop").off("taphold");
        charOffset = 0;
        $(document).on("keydown", desktopKeyDown);
        $(document).on("keyup", desktopKeyUp);
        $(".imgbutton").css("visibility", "hidden");
        $("#hd").css("visibility", "visible")
    }
}

function desktopKeyDown(e) {
    e.preventDefault();
    e.stopPropagation();
    charOffset++;
    if (lastKey == e.which) {
        return
    }
    lastKey = e.which;
    KeyBuff += ">" + getKey(e.which)
}

function desktopKeyUp(e) {
    e.preventDefault();
    e.stopPropagation();
    if (charOffset == 1) {
        if (lastKey == e.which) {
            KeyBuff = KeyBuff.substring(0, KeyBuff.lastIndexOf(">"));
            KeyBuff += getKey(e.which)
        } else {
            KeyBuff += "^" + getKey(e.which)
        }
        charOffset--;
        updateKey = true;
        desktopPollKey()
    } else {
        KeyBuff += "^" + getKey(e.which);
        charOffset--
    }
    lastKey = -1
}

function getKey(numnum) {
    if ((numnum > 111) && (numnum < 124)) {
        return "{F" + (numnum - 111) + "}"
    }
    switch (numnum) {
    case 13:
        return "{N}";
    case 38:
        return "{U}";
    case 40:
        return "{D}";
    case 37:
        return "{L}";
    case 39:
        return "{R}";
    case 8:
        return "{BS}";
    case 9:
        return "{TAB}";
    case 16:
        return "{LSHIFT}";
    case 17:
        return "{LCTRL}";
    case 18:
        return "{ALT}";
    case 46:
        return "{DEL}";
    case 219:
        return "[";
    case 221:
        return "]";
    case 186:
        return ";";
    case 222:
        return "'";
    case 188:
        return ",";
    case 190:
        return ".";
    case 191:
        return "/";
    case 32:
        return " ^";
    case 220:
        return '\\';
    case 192:
        return "`";
    case 173:
        return '-';
    case 187:
        return "=";
    case 36:
        return "{HOME}";
    case 33:
        return "{PU}";
    case 34:
        return "{PD}";
    case 35:
        return "{END}";
    default:
        return String.fromCharCode(numnum)
    }
}

function desktopPollKey() {
    if (KeyBuff && charOffset == 0) {
        if (updateKey == true) {
            $.post("/ke?s=" + KeyBuff, function () {
                updateKey = true;
                desktopPollKey()
            });
            KeyBuff = "";
            updateKey = false
        }
    }
}

function mouseMove(e) {
    var realx = e.pageX,
        realy = e.pageY;
    if (updateMouse) {
        if (prevX != null) {
            $.post('/' + clickI + "?x=" + prevX + "&y=" + prevY, function () {
                updateMouse = true
            });
            prevX = null;
            prevY = null
        } else {
            realx = Math.round(realx * Ratio);
            realy = Math.round(realy * Ratio);
            $.post("/ma?x=" + realx + "&y=" + realy, function () {
                updateMouse = true
            })
        }
        updateMouse = false
    }
}

function desktopMouseDown(e) {
    e.preventDefault();
    switch (e.which) {
    case 1:
        clickI = 'ld';
        break;
    case 2:
        clickI = 'md';
        break;
    case 3:
        clickI = 'rd';
        break
    }
    prevX = Math.round(e.pageX * Ratio);
    prevY = Math.round(e.pageY * Ratio)
}

function desktopMouseUp(e) {
    e.preventDefault();
    e.stopPropagation();
    var realX = Math.round(e.pageX * Ratio);
    var realY = Math.round(e.pageY * Ratio);
    if (prevX != null) {
        isTap = true;
        prevX = null;
        prevY = null
    } else {
        isTap = false;
        prevX = realX;
        prevY = realY
    }
    switch (e.which) {
    case 1:
        clickI = 'lu';
        if (isTap) {
            $.post("/click?x=" + realX + "&y=" + realY)
        }
        break;
    case 2:
        clickI = 'mu';
        if (isTap == true) {
            $.post("/mc?x=" + realX + "&y=" + realY)
        }
        break;
    case 3:
        clickI = 'ru';
        if (isTap == true) {
            $.post("/rc?x=" + realX + "&y=" + realY)
        }
        break
    }
}

function pollKey() {
    if (updateKey) {
        if (backLen > 0) {
            $.post("/k", "b=" + backLen).done(function () {
                updateKey = true
            });
            backLen = 0
        } else {
            var snapshot = $("#keys").val();
            var keyLength = snapshot.length - charOffset;
            if (keyLength != 0) {
                if (keyLength > 0) {
                    $.post("/k", "s=" + snapshot.substring(charOffset)).done(function () {
                        updateKey = true
                    })
                } else {
                    $.post("/k", "b=" + (keyLength * -1)).done(function () {
                        updateKey = true
                    })
                }
                charOffset += keyLength
            }
        }
    }
    if (!breakKey) {
        setTimeout(pollKey, 300)
    }
}

function moveDrag(e) {
    var event = e.originalEvent;
    var a = event.changedTouches;
    e.preventDefault();
    var realx, realy;
    if (a[0].identifier == leadFinger) {
        if (updateMouse) {
            realx = a[0].pageX - prevX;
            realy = a[0].pageY - prevY;
            if (!isZoom) {
                realx = Math.round(realx * Ratio);
                realy = Math.round(realy * Ratio)
            }
            $.post("/m?x=" + realx + "&y=" + realy, function () {
                updateMouse = true
            });
            updateMouse = false;
            prevX = a[0].pageX;
            prevY = a[0].pageY
        }
    }
}

function moveView(e) {
    var event = e.originalEvent;
    var a = event.changedTouches;
    e.preventDefault();
    var realx = a[0].pageX - prevX,
        realy = a[0].pageY - prevY;
    if (a[0].identifier == leadFinger) {
        LeftCorner[0] -= realx;
        LeftCorner[1] -= realy;
        normalizeCorner();
        imageSRCtouch = 'c=' + LeftCorner[0] + ',' + LeftCorner[1];
        imageSRC = "2?" + imageSRCdem + '&' + imageSRCtouch + '&t=';
        prevX = a[0].pageX;
        prevY = a[0].pageY
    }
}

function normalizeCorner() {
    var xbound = Width - document.documentElement.clientWidth;
    var ybound = Height - document.documentElement.clientHeight;
    if (LeftCorner[0] > xbound) LeftCorner[0] = xbound;
    if (LeftCorner[1] > ybound) LeftCorner[1] = ybound;
    if (LeftCorner[0] < 0) LeftCorner[0] = 0;
    if (LeftCorner[1] < 0) LeftCorner[1] = 0
}

function genTouchOver(e) {
    var event = e.originalEvent;
    var touch = event.changedTouches[0];
    if (leadFinger == touch.identifier) {
        if (isTap) {
            tapEvent(event);
            leadFinger = -1
        } else {
            if (isMouse) {
                var realx = LeftCorner[0] + touch.pageX,
                    realy = LeftCorner[1] + touch.pageY;
                if (!isZoom) {
                    realx = Math.round(realx * Ratio);
                    realy = Math.round(realy * Ratio)
                }
                $.post("/lu?x=" + realx + "&y=" + realy)
            } else {
                normalizeCorner()
            }
        }
    }
}

function tapZoom(event) {
    var touch = event.changedTouches[0];
    LeftCorner[0] = Math.round((touch.pageX * Ratio) - ($(document).width() / 2));
    LeftCorner[1] = Math.round((touch.pageY * Ratio) - ($(document).height() / 2));
    normalizeCorner();
    imageSRCtouch = 'c=' + LeftCorner[0] + ',' + LeftCorner[1];
    setFull();
    isZoom = true;
    history.replaceState("zoom", "", location.pathname + "#zoom");
    history.pushState("base", null, location.href);
    $("#Desktop").on("touchmove", moveView);
    tapEvent = function () {
        mouseToggle($("#keys"))
    }
}

function tapClick(event) {
    var touch = event.changedTouches[0];
    var realx = LeftCorner[0] + touch.pageX,
        realy = LeftCorner[1] + touch.pageY;
    if (!isZoom) {
        realx = Math.round(realx * Ratio);
        realy = Math.round(realy * Ratio)
    }
    $.post("/click?x=" + realx + "&y=" + realy)
}

function HDToggle(arg) {
    $(arg).toggleClass("toggled");
    if (imgInsert == "s") {
        imgInsert = ""
    } else {
        imgInsert = "s"
    }
}

function mouseToggle(arg) {
    if (isMouse) {
        isMouse = false;
        history.back()
    } else {
        $(arg).toggleClass("toggled");
        history.replaceState("mouse", "", location.pathname + "#mouse");
        history.pushState("base", null, location.href);
        $("#Desktop").on("touchmove", moveDrag);
        $("#Desktop").off("touchmove", moveView);
        $("#olay").css({
            opacity: 0.7
        });
        tapEvent = tapClick;
        isMouse = true
    }
}

function setFull() {
    $("#Desktop").attr('height', "100%");
    $.event.special.swipe.horizontalDistanceThreshold = Math.round(0.75 * $(document).width());
    imageSRCdem = 'd=' + $(document).width() + ',' + $(document).height();
    imageSRC = "2?" + imageSRCdem + '&' + imageSRCtouch + '&t='
}

function keyboard() {
    $("#sidepanel").panel("close");
    $("#keys").val("");
    charOffset = 0;
    backLen = 0;
    breakKey = false;
    updateKey = true;
    $("#keys").focus();
    pollKey()
}
$(window).resize(function () {
    if (tapEvent != tapZoom) {
        setFull()
    }
    Ratio = Width / $("#Desktop").width();
    $("#Desktop").attr('width', "100%")
});
</script>
</head>

<body style='margin:0px;padding:0px;'>
    <div data-role="page">

        <div data-role="panel" id="sidepanel" data-dismissible="true" data-theme="a" data-display="overlay">

            <img id="imgM" src="/m/images/mouse.png" class="imgbutton" onclick="mouseToggle(this)"><a style="float:right;" onclick='$("#sidepanel").panel("close");'>( Close ) X</a>
            <br><b><font size="3" color="white">Tap to control the mouse. Tap to click, hold to right click, drag to drag mouse. Use browser back to stop controlling the mouse before swiping to open this menu again.
	<br><img src="/m/images/keyboard.png" class="imgbutton" onclick='keyboard();'><br>
	Tap to show touch keyboard. Your keystrokes will be sent to the remote computer.
	<br><img id="hd" src="/m/images/HD.png" onload='$(this).toggleClass("toggled");' class="imgbutton" onclick="HDToggle(this);"><br>
	Toggle lossless HD mode. When HD is off image quality will decrease in order to increase speed and responsiveness. 
	<br><br><a onclick='$.post("/m/message","This machine is in a remote desktop session.")'>Notify remote machine that you are in a remote desktop session.</a><br>
	</font></b>
            <br>
        </div>
        <img style="display:block;position:absolute;left:0px;top:0px;" onload="this.src= '/' + imgInsert + imageSRC + (reloads++);" id="Desktop" src="/ss" width="100%">
        <img id="olay" width="10%" style="pointer-events:none;display:block;float:right;text-decoration:none;opacity: 0.0;" src="/m/images/mouse.png">
        <textarea data-role="none" id="keys">
            <!-- header -->
            <!-- content -->
            <!-- footer -->

    </div>
</body>

</html>